package de.pixelscape.assets.symbols{	import flash.display.Loader;
	import flash.display.LoaderInfo;
	import flash.display.MovieClip;
	import flash.events.Event;
	import flash.events.EventDispatcher;
	import flash.net.URLRequest;
	import flash.system.ApplicationDomain;
	import flash.utils.getQualifiedSuperclassName;
	/**	 * The SymbolsManager provides application wide access to the symbols of a loaded swf file.	 * 	 * @author Tobias Friese	 */	public class SymbolsManager extends EventDispatcher 	{		private static var _instance:SymbolsManager;				private var _loaders:Vector.<Loader>		= new Vector.<Loader>();				private var _libraries:Object				= new Object();		private var _domains:Object					= new Object();				/* constants */				/** Dispatched when an swf file has been loaded and set. */		public static const LIBRARY_READY:String = "AssetManager.libraryReady";				/** SymbolsManager constructor */		public function SymbolsManager()		{			if (_instance != null) throw new Error("SymbolsManager is a Singleton and therefor can only be accessed through SymbolsManager.getInstance() or SymbolsManager.instance.");			else _instance = this;		}		/** singleton getter */		public static function getInstance():SymbolsManager		{			if (_instance == null) _instance = new SymbolsManager();			return _instance;		}				/** singleton getter */		public static function get instance():SymbolsManager		{			if (_instance == null) _instance = new SymbolsManager();			return _instance;		}				/** shortcut to getSymbolInstance method of singleton instance */		public static function getSymbolInstance(symbolClassName:String, libID:String = 'main'):* 		{			return getInstance().getSymbolInstance(symbolClassName, libID);		}				public static function hasLibrary(libID:String):Boolean		{			return getInstance().hasLibrary(libID);		}				/**		 * Loads a swf file and prepares it for symbols extraction.		 * 		 * @param path the path to the swf file to load		 */		public function loadLibrary(urlRequest:URLRequest, libID:String = 'main'):void		{			// check for existing loader with same id			for each(var existingLoader:Loader in _loaders)			{				if(existingLoader.name == libID) return;			}						// create loader & load			var loader:Loader = new Loader();			loader.name = libID;			loader.contentLoaderInfo.addEventListener(Event.INIT, handleLibraryLoaded);						_loaders.push(loader);			loader.load(urlRequest);		}				public function addLibrary(library:MovieClip, domain:ApplicationDomain, libID:String = 'main'):void		{			// cancellation			if(hasLibrary(libID)) return;						// set			_libraries[libID] = library;			_domains[libID] = domain;		}				/**		 * Returns an instance of a symbol object contained by the loaded swf file.		 * 		 * @param symbolClassName the name of the class to be instantiated		 */		public function getSymbolInstance(symbolClassName:String, libID:String = 'main'):* 		{			// cancellation			if(!_libraries.hasOwnProperty(libID)) return null;			if(!_domains.hasOwnProperty(libID)) return null;						// get vars			var library:MovieClip = _libraries[libID];			var domain:ApplicationDomain = _domains[libID];						// get symbol definition and class name			var symbolClass:Class = domain.getDefinition(symbolClassName) as Class;			var symbolSuperClass:String = getQualifiedSuperclassName(symbolClass);						// get instance			switch(symbolSuperClass)			{				case "flash.display::MovieClip":				case "flash.display::Sprite":				case "flash.text::Font":					return new symbolClass();					break;									case "flash.display::BitmapData":					return new symbolClass(null, null);					break;									default:					throw new Error("Symbol '" + symbolClassName + "' could not be found.");					break;			}						// return			return null;		}				public function hasLibrary(libID:String):Boolean		{			return _libraries.hasOwnProperty(libID);		}				/* getter setter */		public function get loaded():Boolean		{			return loadProgress == 1;		}				public function get loadProgress():Number		{
			if(_loaders.length == 0) return 1;						var progress:Number = 0;			for each(var loader:Loader in _loaders) progress += loader.contentLoaderInfo.bytesLoaded / loader.contentLoaderInfo.bytesTotal;						return progress / _loaders.length;		}		/* event handler */		private function handleLibraryLoaded(e:Event):void		{			var loaderInfo:LoaderInfo = LoaderInfo(e.target);			loaderInfo.removeEventListener(Event.INIT, handleLibraryLoaded);						// add			addLibrary(MovieClip(loaderInfo.content), loaderInfo.applicationDomain, loaderInfo.loader.name);						// remove from loading queue			for(var i:int = 0; i < _loaders.length; i++)			{				if(_loaders[i] === loaderInfo.loader)				{					_loaders.splice(i, 1);					break;				}			}						// dispatch			if(loaded) dispatchEvent(new Event(LIBRARY_READY));		}	}}
package de.pixelscape.display.toolTip {	import de.pixelscape.display.toolTip.ToolTip;	import com.greensock.TweenLite;	import com.greensock.easing.Cubic;	import flash.display.DisplayObject;	import flash.display.Sprite;	import flash.events.TimerEvent;	import flash.filters.DropShadowFilter;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;	import flash.text.TextFormat;	/**	 * @author Tobias Friese	 */	public class StandardToolTip extends ToolTip 	{		/* variables */		private var _container:Sprite;				/* constants */		private static const BACKGROUND_COLOR:uint = 0x000000;		private static const BACKGROUND_ALPHA:Number = .7;				private static const BORDER_WIDTH:Number = 1;		private static const BORDER_COLOR:uint = 0xFFFFFF;		private static const BORDER_ALPHA:Number = .7;				private static const MARGIN:int = 2;				public function StandardToolTip(content:*, delay:Number = 0)		{			super(content, delay);						// build			this.build();		}				private function build():void		{			this._container = new Sprite();						// content			if(this._content is String)			{				var tf:TextField = new TextField();								tf.embedFonts = false;				tf.selectable = false;				tf.autoSize = TextFieldAutoSize.LEFT;								tf.text = String(this._content);				tf.setTextFormat(new TextFormat("Tahoma", 11, 0xFFFFFF));								this._content = tf;			}						this._content.x = MARGIN;			this._content.y = MARGIN;						this._container.addChild(this._content);						// background			var tipWidth:Number = DisplayObject(this._content).width + (MARGIN * 2);			var tipHeight:Number = DisplayObject(this._content).height + (MARGIN * 2);						with(this._container.graphics)			{				beginFill(BACKGROUND_COLOR, BACKGROUND_ALPHA);				lineStyle(BORDER_WIDTH, BORDER_COLOR, BORDER_ALPHA);				moveTo(0,0);				lineTo(tipWidth, 0);				lineTo(tipWidth, tipHeight);				lineTo(20, tipHeight);				lineTo(10, tipHeight + 10);				lineTo(10, tipHeight);				lineTo(0, tipHeight);				lineTo(0, 0);				endFill();			}						this._container.filters = new Array(new DropShadowFilter(2, 45, 0, 1, 6, 6, .3, 3));						this.addChild(_container);						// positioning			this._container.x = -10;			this._container.y = -(tipHeight + 10);						// init			this.alpha = 0;		}				override public function show(e:TimerEvent = null):void		{			this.y -= 5;			TweenLite.to(this, .3, {alpha:1, y:(this.y + 5), ease:Cubic.easeOut});		}				override public function hide(onComplete:Function = null):void		{			// timer			if(_timer != null) if(_timer.running == true) _timer.stop();						if(this.alpha == 0) onComplete();			else TweenLite.to(this, .3, {alpha:0, y:(this.y - 5), ease:Cubic.easeOut, onComplete:onComplete});		}	}}